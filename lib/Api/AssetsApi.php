<?php
/**
 * AssetsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bridgeman Images Public Api
 *
 * Last updated on 2019-12-19. Yml version [https://public-api.bridgemanimages.com/swagger.yaml](/swagger.yaml) Note that all endpoints have \"/1.0\" prefix, e.g. \"/1.0/asset/1699997/image/thumbnail\".
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AssetsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssetsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAssets
     *
     * @param  string $scope Scope of data to be returned: * basic * profile * limited_profile (required)
     * @param  int $offset Offsets the list returned to this amount. Default 0. (optional)
     * @param  int $limit Limits the list returned to this amount. Default 10. (optional)
     * @param  string $sort Order the results using following options: * default * asset_hr_size * asset_id * asset_in_copyright * asset_medium * creator_name * latest * location_name * most_popular * most_relevant * photographer_name * supplier_prefix (optional)
     * @param  string $sort_order Defines an order for sorting: ASC or DESC. (optional)
     * @param  string $query Filter the list by given query, e.g.: &#39;cats dogs&#39; (optional)
     * @param  int $asset_category_id  (optional)
     * @param  string $asset_colour_type * bw &#x3D; Black and White * col &#x3D; Coloured (optional)
     * @param  int $asset_copyright_status * 0 &#x3D; OUT of Copyright * 1 &#x3D; IN Copyright * 2 &#x3D; Unknown Copyright Status (optional)
     * @param  int $asset_created_century_from  (optional)
     * @param  int $asset_created_century_until  (optional)
     * @param  int $asset_created_year_from  (optional)
     * @param  int $asset_created_year_until  (optional)
     * @param  string $asset_description  (optional)
     * @param  int $asset_height_min  (optional)
     * @param  int $asset_height_max  (optional)
     * @param  int $asset_id  (optional)
     * @param  int $asset_id_from starting asset id (inclusive) (optional)
     * @param  int $asset_id_to ending asset id (inclusive) (optional)
     * @param  string $asset_image_of * ill &#x3D; Illustration * obj &#x3D; Object * pho &#x3D; Photo (optional)
     * @param  string $asset_keywords  (optional)
     * @param  string $asset_location  (optional)
     * @param  string $asset_medium  (optional)
     * @param  string $asset_orientation * h &#x3D; Horizontal * v &#x3D; Vertical * s &#x3D; Square (optional)
     * @param  int $asset_rgb_red_value  (optional)
     * @param  int $asset_rgb_green_value  (optional)
     * @param  int $asset_rgb_blue_value  (optional)
     * @param  string $asset_rgb_profile  (optional)
     * @param  string $asset_title Example: &#39;rainy%20day&#39; (optional)
     * @param  int $asset_type * 1 &#x3D; Image * 2 &#x3D; Footage (optional)
     * @param  int $asset_width_min  (optional)
     * @param  int $asset_width_max  (optional)
     * @param  int $copyright_handler_id  (optional)
     * @param  int $copyright_holder_id  (optional)
     * @param  int $creator_id  (optional)
     * @param  string $region 3 letters country code (optional)
     * @param  int $supplier_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getAssets($scope, $offset = null, $limit = null, $sort = null, $sort_order = null, $query = null, $asset_category_id = null, $asset_colour_type = null, $asset_copyright_status = null, $asset_created_century_from = null, $asset_created_century_until = null, $asset_created_year_from = null, $asset_created_year_until = null, $asset_description = null, $asset_height_min = null, $asset_height_max = null, $asset_id = null, $asset_id_from = null, $asset_id_to = null, $asset_image_of = null, $asset_keywords = null, $asset_location = null, $asset_medium = null, $asset_orientation = null, $asset_rgb_red_value = null, $asset_rgb_green_value = null, $asset_rgb_blue_value = null, $asset_rgb_profile = null, $asset_title = null, $asset_type = null, $asset_width_min = null, $asset_width_max = null, $copyright_handler_id = null, $copyright_holder_id = null, $creator_id = null, $region = null, $supplier_id = null)
    {
        list($response) = $this->getAssetsWithHttpInfo($scope, $offset, $limit, $sort, $sort_order, $query, $asset_category_id, $asset_colour_type, $asset_copyright_status, $asset_created_century_from, $asset_created_century_until, $asset_created_year_from, $asset_created_year_until, $asset_description, $asset_height_min, $asset_height_max, $asset_id, $asset_id_from, $asset_id_to, $asset_image_of, $asset_keywords, $asset_location, $asset_medium, $asset_orientation, $asset_rgb_red_value, $asset_rgb_green_value, $asset_rgb_blue_value, $asset_rgb_profile, $asset_title, $asset_type, $asset_width_min, $asset_width_max, $copyright_handler_id, $copyright_holder_id, $creator_id, $region, $supplier_id);
        return $response;
    }

    /**
     * Operation getAssetsWithHttpInfo
     *
     * @param  string $scope Scope of data to be returned: * basic * profile * limited_profile (required)
     * @param  int $offset Offsets the list returned to this amount. Default 0. (optional)
     * @param  int $limit Limits the list returned to this amount. Default 10. (optional)
     * @param  string $sort Order the results using following options: * default * asset_hr_size * asset_id * asset_in_copyright * asset_medium * creator_name * latest * location_name * most_popular * most_relevant * photographer_name * supplier_prefix (optional)
     * @param  string $sort_order Defines an order for sorting: ASC or DESC. (optional)
     * @param  string $query Filter the list by given query, e.g.: &#39;cats dogs&#39; (optional)
     * @param  int $asset_category_id  (optional)
     * @param  string $asset_colour_type * bw &#x3D; Black and White * col &#x3D; Coloured (optional)
     * @param  int $asset_copyright_status * 0 &#x3D; OUT of Copyright * 1 &#x3D; IN Copyright * 2 &#x3D; Unknown Copyright Status (optional)
     * @param  int $asset_created_century_from  (optional)
     * @param  int $asset_created_century_until  (optional)
     * @param  int $asset_created_year_from  (optional)
     * @param  int $asset_created_year_until  (optional)
     * @param  string $asset_description  (optional)
     * @param  int $asset_height_min  (optional)
     * @param  int $asset_height_max  (optional)
     * @param  int $asset_id  (optional)
     * @param  int $asset_id_from starting asset id (inclusive) (optional)
     * @param  int $asset_id_to ending asset id (inclusive) (optional)
     * @param  string $asset_image_of * ill &#x3D; Illustration * obj &#x3D; Object * pho &#x3D; Photo (optional)
     * @param  string $asset_keywords  (optional)
     * @param  string $asset_location  (optional)
     * @param  string $asset_medium  (optional)
     * @param  string $asset_orientation * h &#x3D; Horizontal * v &#x3D; Vertical * s &#x3D; Square (optional)
     * @param  int $asset_rgb_red_value  (optional)
     * @param  int $asset_rgb_green_value  (optional)
     * @param  int $asset_rgb_blue_value  (optional)
     * @param  string $asset_rgb_profile  (optional)
     * @param  string $asset_title Example: &#39;rainy%20day&#39; (optional)
     * @param  int $asset_type * 1 &#x3D; Image * 2 &#x3D; Footage (optional)
     * @param  int $asset_width_min  (optional)
     * @param  int $asset_width_max  (optional)
     * @param  int $copyright_handler_id  (optional)
     * @param  int $copyright_holder_id  (optional)
     * @param  int $creator_id  (optional)
     * @param  string $region 3 letters country code (optional)
     * @param  int $supplier_id  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetsWithHttpInfo($scope, $offset = null, $limit = null, $sort = null, $sort_order = null, $query = null, $asset_category_id = null, $asset_colour_type = null, $asset_copyright_status = null, $asset_created_century_from = null, $asset_created_century_until = null, $asset_created_year_from = null, $asset_created_year_until = null, $asset_description = null, $asset_height_min = null, $asset_height_max = null, $asset_id = null, $asset_id_from = null, $asset_id_to = null, $asset_image_of = null, $asset_keywords = null, $asset_location = null, $asset_medium = null, $asset_orientation = null, $asset_rgb_red_value = null, $asset_rgb_green_value = null, $asset_rgb_blue_value = null, $asset_rgb_profile = null, $asset_title = null, $asset_type = null, $asset_width_min = null, $asset_width_max = null, $copyright_handler_id = null, $copyright_holder_id = null, $creator_id = null, $region = null, $supplier_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getAssetsRequest($scope, $offset, $limit, $sort, $sort_order, $query, $asset_category_id, $asset_colour_type, $asset_copyright_status, $asset_created_century_from, $asset_created_century_until, $asset_created_year_from, $asset_created_year_until, $asset_description, $asset_height_min, $asset_height_max, $asset_id, $asset_id_from, $asset_id_to, $asset_image_of, $asset_keywords, $asset_location, $asset_medium, $asset_orientation, $asset_rgb_red_value, $asset_rgb_green_value, $asset_rgb_blue_value, $asset_rgb_profile, $asset_title, $asset_type, $asset_width_min, $asset_width_max, $copyright_handler_id, $copyright_holder_id, $creator_id, $region, $supplier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetsAsync
     *
     * 
     *
     * @param  string $scope Scope of data to be returned: * basic * profile * limited_profile (required)
     * @param  int $offset Offsets the list returned to this amount. Default 0. (optional)
     * @param  int $limit Limits the list returned to this amount. Default 10. (optional)
     * @param  string $sort Order the results using following options: * default * asset_hr_size * asset_id * asset_in_copyright * asset_medium * creator_name * latest * location_name * most_popular * most_relevant * photographer_name * supplier_prefix (optional)
     * @param  string $sort_order Defines an order for sorting: ASC or DESC. (optional)
     * @param  string $query Filter the list by given query, e.g.: &#39;cats dogs&#39; (optional)
     * @param  int $asset_category_id  (optional)
     * @param  string $asset_colour_type * bw &#x3D; Black and White * col &#x3D; Coloured (optional)
     * @param  int $asset_copyright_status * 0 &#x3D; OUT of Copyright * 1 &#x3D; IN Copyright * 2 &#x3D; Unknown Copyright Status (optional)
     * @param  int $asset_created_century_from  (optional)
     * @param  int $asset_created_century_until  (optional)
     * @param  int $asset_created_year_from  (optional)
     * @param  int $asset_created_year_until  (optional)
     * @param  string $asset_description  (optional)
     * @param  int $asset_height_min  (optional)
     * @param  int $asset_height_max  (optional)
     * @param  int $asset_id  (optional)
     * @param  int $asset_id_from starting asset id (inclusive) (optional)
     * @param  int $asset_id_to ending asset id (inclusive) (optional)
     * @param  string $asset_image_of * ill &#x3D; Illustration * obj &#x3D; Object * pho &#x3D; Photo (optional)
     * @param  string $asset_keywords  (optional)
     * @param  string $asset_location  (optional)
     * @param  string $asset_medium  (optional)
     * @param  string $asset_orientation * h &#x3D; Horizontal * v &#x3D; Vertical * s &#x3D; Square (optional)
     * @param  int $asset_rgb_red_value  (optional)
     * @param  int $asset_rgb_green_value  (optional)
     * @param  int $asset_rgb_blue_value  (optional)
     * @param  string $asset_rgb_profile  (optional)
     * @param  string $asset_title Example: &#39;rainy%20day&#39; (optional)
     * @param  int $asset_type * 1 &#x3D; Image * 2 &#x3D; Footage (optional)
     * @param  int $asset_width_min  (optional)
     * @param  int $asset_width_max  (optional)
     * @param  int $copyright_handler_id  (optional)
     * @param  int $copyright_holder_id  (optional)
     * @param  int $creator_id  (optional)
     * @param  string $region 3 letters country code (optional)
     * @param  int $supplier_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsAsync($scope, $offset = null, $limit = null, $sort = null, $sort_order = null, $query = null, $asset_category_id = null, $asset_colour_type = null, $asset_copyright_status = null, $asset_created_century_from = null, $asset_created_century_until = null, $asset_created_year_from = null, $asset_created_year_until = null, $asset_description = null, $asset_height_min = null, $asset_height_max = null, $asset_id = null, $asset_id_from = null, $asset_id_to = null, $asset_image_of = null, $asset_keywords = null, $asset_location = null, $asset_medium = null, $asset_orientation = null, $asset_rgb_red_value = null, $asset_rgb_green_value = null, $asset_rgb_blue_value = null, $asset_rgb_profile = null, $asset_title = null, $asset_type = null, $asset_width_min = null, $asset_width_max = null, $copyright_handler_id = null, $copyright_holder_id = null, $creator_id = null, $region = null, $supplier_id = null)
    {
        return $this->getAssetsAsyncWithHttpInfo($scope, $offset, $limit, $sort, $sort_order, $query, $asset_category_id, $asset_colour_type, $asset_copyright_status, $asset_created_century_from, $asset_created_century_until, $asset_created_year_from, $asset_created_year_until, $asset_description, $asset_height_min, $asset_height_max, $asset_id, $asset_id_from, $asset_id_to, $asset_image_of, $asset_keywords, $asset_location, $asset_medium, $asset_orientation, $asset_rgb_red_value, $asset_rgb_green_value, $asset_rgb_blue_value, $asset_rgb_profile, $asset_title, $asset_type, $asset_width_min, $asset_width_max, $copyright_handler_id, $copyright_holder_id, $creator_id, $region, $supplier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $scope Scope of data to be returned: * basic * profile * limited_profile (required)
     * @param  int $offset Offsets the list returned to this amount. Default 0. (optional)
     * @param  int $limit Limits the list returned to this amount. Default 10. (optional)
     * @param  string $sort Order the results using following options: * default * asset_hr_size * asset_id * asset_in_copyright * asset_medium * creator_name * latest * location_name * most_popular * most_relevant * photographer_name * supplier_prefix (optional)
     * @param  string $sort_order Defines an order for sorting: ASC or DESC. (optional)
     * @param  string $query Filter the list by given query, e.g.: &#39;cats dogs&#39; (optional)
     * @param  int $asset_category_id  (optional)
     * @param  string $asset_colour_type * bw &#x3D; Black and White * col &#x3D; Coloured (optional)
     * @param  int $asset_copyright_status * 0 &#x3D; OUT of Copyright * 1 &#x3D; IN Copyright * 2 &#x3D; Unknown Copyright Status (optional)
     * @param  int $asset_created_century_from  (optional)
     * @param  int $asset_created_century_until  (optional)
     * @param  int $asset_created_year_from  (optional)
     * @param  int $asset_created_year_until  (optional)
     * @param  string $asset_description  (optional)
     * @param  int $asset_height_min  (optional)
     * @param  int $asset_height_max  (optional)
     * @param  int $asset_id  (optional)
     * @param  int $asset_id_from starting asset id (inclusive) (optional)
     * @param  int $asset_id_to ending asset id (inclusive) (optional)
     * @param  string $asset_image_of * ill &#x3D; Illustration * obj &#x3D; Object * pho &#x3D; Photo (optional)
     * @param  string $asset_keywords  (optional)
     * @param  string $asset_location  (optional)
     * @param  string $asset_medium  (optional)
     * @param  string $asset_orientation * h &#x3D; Horizontal * v &#x3D; Vertical * s &#x3D; Square (optional)
     * @param  int $asset_rgb_red_value  (optional)
     * @param  int $asset_rgb_green_value  (optional)
     * @param  int $asset_rgb_blue_value  (optional)
     * @param  string $asset_rgb_profile  (optional)
     * @param  string $asset_title Example: &#39;rainy%20day&#39; (optional)
     * @param  int $asset_type * 1 &#x3D; Image * 2 &#x3D; Footage (optional)
     * @param  int $asset_width_min  (optional)
     * @param  int $asset_width_max  (optional)
     * @param  int $copyright_handler_id  (optional)
     * @param  int $copyright_holder_id  (optional)
     * @param  int $creator_id  (optional)
     * @param  string $region 3 letters country code (optional)
     * @param  int $supplier_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsAsyncWithHttpInfo($scope, $offset = null, $limit = null, $sort = null, $sort_order = null, $query = null, $asset_category_id = null, $asset_colour_type = null, $asset_copyright_status = null, $asset_created_century_from = null, $asset_created_century_until = null, $asset_created_year_from = null, $asset_created_year_until = null, $asset_description = null, $asset_height_min = null, $asset_height_max = null, $asset_id = null, $asset_id_from = null, $asset_id_to = null, $asset_image_of = null, $asset_keywords = null, $asset_location = null, $asset_medium = null, $asset_orientation = null, $asset_rgb_red_value = null, $asset_rgb_green_value = null, $asset_rgb_blue_value = null, $asset_rgb_profile = null, $asset_title = null, $asset_type = null, $asset_width_min = null, $asset_width_max = null, $copyright_handler_id = null, $copyright_holder_id = null, $creator_id = null, $region = null, $supplier_id = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getAssetsRequest($scope, $offset, $limit, $sort, $sort_order, $query, $asset_category_id, $asset_colour_type, $asset_copyright_status, $asset_created_century_from, $asset_created_century_until, $asset_created_year_from, $asset_created_year_until, $asset_description, $asset_height_min, $asset_height_max, $asset_id, $asset_id_from, $asset_id_to, $asset_image_of, $asset_keywords, $asset_location, $asset_medium, $asset_orientation, $asset_rgb_red_value, $asset_rgb_green_value, $asset_rgb_blue_value, $asset_rgb_profile, $asset_title, $asset_type, $asset_width_min, $asset_width_max, $copyright_handler_id, $copyright_holder_id, $creator_id, $region, $supplier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssets'
     *
     * @param  string $scope Scope of data to be returned: * basic * profile * limited_profile (required)
     * @param  int $offset Offsets the list returned to this amount. Default 0. (optional)
     * @param  int $limit Limits the list returned to this amount. Default 10. (optional)
     * @param  string $sort Order the results using following options: * default * asset_hr_size * asset_id * asset_in_copyright * asset_medium * creator_name * latest * location_name * most_popular * most_relevant * photographer_name * supplier_prefix (optional)
     * @param  string $sort_order Defines an order for sorting: ASC or DESC. (optional)
     * @param  string $query Filter the list by given query, e.g.: &#39;cats dogs&#39; (optional)
     * @param  int $asset_category_id  (optional)
     * @param  string $asset_colour_type * bw &#x3D; Black and White * col &#x3D; Coloured (optional)
     * @param  int $asset_copyright_status * 0 &#x3D; OUT of Copyright * 1 &#x3D; IN Copyright * 2 &#x3D; Unknown Copyright Status (optional)
     * @param  int $asset_created_century_from  (optional)
     * @param  int $asset_created_century_until  (optional)
     * @param  int $asset_created_year_from  (optional)
     * @param  int $asset_created_year_until  (optional)
     * @param  string $asset_description  (optional)
     * @param  int $asset_height_min  (optional)
     * @param  int $asset_height_max  (optional)
     * @param  int $asset_id  (optional)
     * @param  int $asset_id_from starting asset id (inclusive) (optional)
     * @param  int $asset_id_to ending asset id (inclusive) (optional)
     * @param  string $asset_image_of * ill &#x3D; Illustration * obj &#x3D; Object * pho &#x3D; Photo (optional)
     * @param  string $asset_keywords  (optional)
     * @param  string $asset_location  (optional)
     * @param  string $asset_medium  (optional)
     * @param  string $asset_orientation * h &#x3D; Horizontal * v &#x3D; Vertical * s &#x3D; Square (optional)
     * @param  int $asset_rgb_red_value  (optional)
     * @param  int $asset_rgb_green_value  (optional)
     * @param  int $asset_rgb_blue_value  (optional)
     * @param  string $asset_rgb_profile  (optional)
     * @param  string $asset_title Example: &#39;rainy%20day&#39; (optional)
     * @param  int $asset_type * 1 &#x3D; Image * 2 &#x3D; Footage (optional)
     * @param  int $asset_width_min  (optional)
     * @param  int $asset_width_max  (optional)
     * @param  int $copyright_handler_id  (optional)
     * @param  int $copyright_holder_id  (optional)
     * @param  int $creator_id  (optional)
     * @param  string $region 3 letters country code (optional)
     * @param  int $supplier_id  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssetsRequest($scope, $offset = null, $limit = null, $sort = null, $sort_order = null, $query = null, $asset_category_id = null, $asset_colour_type = null, $asset_copyright_status = null, $asset_created_century_from = null, $asset_created_century_until = null, $asset_created_year_from = null, $asset_created_year_until = null, $asset_description = null, $asset_height_min = null, $asset_height_max = null, $asset_id = null, $asset_id_from = null, $asset_id_to = null, $asset_image_of = null, $asset_keywords = null, $asset_location = null, $asset_medium = null, $asset_orientation = null, $asset_rgb_red_value = null, $asset_rgb_green_value = null, $asset_rgb_blue_value = null, $asset_rgb_profile = null, $asset_title = null, $asset_type = null, $asset_width_min = null, $asset_width_max = null, $copyright_handler_id = null, $copyright_holder_id = null, $creator_id = null, $region = null, $supplier_id = null)
    {
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling getAssets'
            );
        }
        if ($query !== null && !preg_match("/general query/", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling AssetsApi.getAssets, must conform to the pattern /general query/.");
        }


        $resourcePath = '/assets/{scope}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order);
        }
        // query params
        if ($query !== null) {
            $queryParams['query'] = ObjectSerializer::toQueryValue($query);
        }
        // query params
        if ($asset_category_id !== null) {
            $queryParams['asset_category_id'] = ObjectSerializer::toQueryValue($asset_category_id);
        }
        // query params
        if ($asset_colour_type !== null) {
            $queryParams['asset_colour_type'] = ObjectSerializer::toQueryValue($asset_colour_type);
        }
        // query params
        if ($asset_copyright_status !== null) {
            $queryParams['asset_copyright_status'] = ObjectSerializer::toQueryValue($asset_copyright_status);
        }
        // query params
        if ($asset_created_century_from !== null) {
            $queryParams['asset_created_century_from'] = ObjectSerializer::toQueryValue($asset_created_century_from);
        }
        // query params
        if ($asset_created_century_until !== null) {
            $queryParams['asset_created_century_until'] = ObjectSerializer::toQueryValue($asset_created_century_until);
        }
        // query params
        if ($asset_created_year_from !== null) {
            $queryParams['asset_created_year_from'] = ObjectSerializer::toQueryValue($asset_created_year_from);
        }
        // query params
        if ($asset_created_year_until !== null) {
            $queryParams['asset_created_year_until'] = ObjectSerializer::toQueryValue($asset_created_year_until);
        }
        // query params
        if ($asset_description !== null) {
            $queryParams['asset_description'] = ObjectSerializer::toQueryValue($asset_description);
        }
        // query params
        if ($asset_height_min !== null) {
            $queryParams['asset_height_min'] = ObjectSerializer::toQueryValue($asset_height_min);
        }
        // query params
        if ($asset_height_max !== null) {
            $queryParams['asset_height_max'] = ObjectSerializer::toQueryValue($asset_height_max);
        }
        // query params
        if ($asset_id !== null) {
            $queryParams['asset_id'] = ObjectSerializer::toQueryValue($asset_id);
        }
        // query params
        if ($asset_id_from !== null) {
            $queryParams['asset_id_from'] = ObjectSerializer::toQueryValue($asset_id_from);
        }
        // query params
        if ($asset_id_to !== null) {
            $queryParams['asset_id_to'] = ObjectSerializer::toQueryValue($asset_id_to);
        }
        // query params
        if ($asset_image_of !== null) {
            $queryParams['asset_image_of'] = ObjectSerializer::toQueryValue($asset_image_of);
        }
        // query params
        if ($asset_keywords !== null) {
            $queryParams['asset_keywords'] = ObjectSerializer::toQueryValue($asset_keywords);
        }
        // query params
        if ($asset_location !== null) {
            $queryParams['asset_location'] = ObjectSerializer::toQueryValue($asset_location);
        }
        // query params
        if ($asset_medium !== null) {
            $queryParams['asset_medium'] = ObjectSerializer::toQueryValue($asset_medium);
        }
        // query params
        if ($asset_orientation !== null) {
            $queryParams['asset_orientation'] = ObjectSerializer::toQueryValue($asset_orientation);
        }
        // query params
        if ($asset_rgb_red_value !== null) {
            $queryParams['asset_rgb_red_value'] = ObjectSerializer::toQueryValue($asset_rgb_red_value);
        }
        // query params
        if ($asset_rgb_green_value !== null) {
            $queryParams['asset_rgb_green_value'] = ObjectSerializer::toQueryValue($asset_rgb_green_value);
        }
        // query params
        if ($asset_rgb_blue_value !== null) {
            $queryParams['asset_rgb_blue_value'] = ObjectSerializer::toQueryValue($asset_rgb_blue_value);
        }
        // query params
        if ($asset_rgb_profile !== null) {
            $queryParams['asset_rgb_profile'] = ObjectSerializer::toQueryValue($asset_rgb_profile);
        }
        // query params
        if ($asset_title !== null) {
            $queryParams['asset_title'] = ObjectSerializer::toQueryValue($asset_title);
        }
        // query params
        if ($asset_type !== null) {
            $queryParams['asset_type'] = ObjectSerializer::toQueryValue($asset_type);
        }
        // query params
        if ($asset_width_min !== null) {
            $queryParams['asset_width_min'] = ObjectSerializer::toQueryValue($asset_width_min);
        }
        // query params
        if ($asset_width_max !== null) {
            $queryParams['asset_width_max'] = ObjectSerializer::toQueryValue($asset_width_max);
        }
        // query params
        if ($copyright_handler_id !== null) {
            $queryParams['copyright_handler_id'] = ObjectSerializer::toQueryValue($copyright_handler_id);
        }
        // query params
        if ($copyright_holder_id !== null) {
            $queryParams['copyright_holder_id'] = ObjectSerializer::toQueryValue($copyright_holder_id);
        }
        // query params
        if ($creator_id !== null) {
            $queryParams['creator_id'] = ObjectSerializer::toQueryValue($creator_id);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($supplier_id !== null) {
            $queryParams['supplier_id'] = ObjectSerializer::toQueryValue($supplier_id);
        }

        // path params
        if ($scope !== null) {
            $resourcePath = str_replace(
                '{' . 'scope' . '}',
                ObjectSerializer::toPathValue($scope),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAssetsRemoved
     *
     * @param  \DateTime $date_start start date (required)
     * @param  \DateTime $date_end end date (optional, default to todays date)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function getAssetsRemoved($date_start, $date_end = 'todays date')
    {
        list($response) = $this->getAssetsRemovedWithHttpInfo($date_start, $date_end);
        return $response;
    }

    /**
     * Operation getAssetsRemovedWithHttpInfo
     *
     * @param  \DateTime $date_start start date (required)
     * @param  \DateTime $date_end end date (optional, default to todays date)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetsRemovedWithHttpInfo($date_start, $date_end = 'todays date')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getAssetsRemovedRequest($date_start, $date_end);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetsRemovedAsync
     *
     * 
     *
     * @param  \DateTime $date_start start date (required)
     * @param  \DateTime $date_end end date (optional, default to todays date)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsRemovedAsync($date_start, $date_end = 'todays date')
    {
        return $this->getAssetsRemovedAsyncWithHttpInfo($date_start, $date_end)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetsRemovedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DateTime $date_start start date (required)
     * @param  \DateTime $date_end end date (optional, default to todays date)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetsRemovedAsyncWithHttpInfo($date_start, $date_end = 'todays date')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->getAssetsRemovedRequest($date_start, $date_end);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAssetsRemoved'
     *
     * @param  \DateTime $date_start start date (required)
     * @param  \DateTime $date_end end date (optional, default to todays date)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAssetsRemovedRequest($date_start, $date_end = 'todays date')
    {
        // verify the required parameter 'date_start' is set
        if ($date_start === null || (is_array($date_start) && count($date_start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_start when calling getAssetsRemoved'
            );
        }

        $resourcePath = '/assets-removed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_start !== null) {
            $queryParams['date_start'] = ObjectSerializer::toQueryValue($date_start);
        }
        // query params
        if ($date_end !== null) {
            $queryParams['date_end'] = ObjectSerializer::toQueryValue($date_end);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
